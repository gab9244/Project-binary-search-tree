(()=>{"use strict";class e{constructor(e){this.value=e,this.left=null,this.right=null}}let t=new class{constructor(){this.root=null}CreateTree(t,r=0,l=t.length-1){if(r>l)return null;let s=Math.floor((r+l)/2),o=new e(t[s]);return o.left=this.CreateTree(t,r,s-1),o.right=this.CreateTree(t,s+1,l),o}Insert(t){let r=new e(t);null===this.root?this.root=r:this.InsertNode(this.root,r)}InsertNode(e,t){t.value<e.value?null===e.left?e.left=t:this.InsertNode(e.left,t):null===e.right?e.right=t:this.InsertNode(e.right,t)}LevelOrder(){let e=[];for(e.push(this.root);e.length;){let t=e.shift();console.log(t.value),t.left&&e.push(t.left),t.right&&e.push(t.right)}}PreOrder(e){e&&(console.log(e.value),this.PreOrder(e.left),this.PreOrder(e.right))}postOrder(e){e&&(this.postOrder(e.left),console.log(e.value),this.postOrder(e.right))}InOrder(e){e&&(this.InOrder(e.left),this.InOrder(e.right),console.log(e.value))}isBalancedHelper(e){if(null===e)return-1;let t=this.isBalancedHelper(e.left),r=this.isBalancedHelper(e.right);return Math.max(t,r)+1}isBalanced(e){return this.isBalancedHelper(e.left)-this.isBalancedHelper(e.right)==1||this.isBalancedHelper(e.left)-this.isBalancedHelper(e.right)==-1||this.isBalancedHelper(e.left)-this.isBalancedHelper(e.right)==0}reBalance(e){let t=[];return this.EmOrdem(e,t),this.buildTree(t)}EmOrdem(e,t){e&&(this.EmOrdem(e.left,t),t.push(e.value),this.EmOrdem(e.right,t))}buildTree(t){if(0===t.length)return null;let r=Math.floor(t.length/2),l=new e(t[r]),s=t.slice(0,r),o=t.slice(r+1);return l.left=this.buildTree(s),l.right=this.buildTree(o),l}};t.Insert(10),t.Insert(5),t.Insert(15),console.log(t.isBalanced(t.root)),console.log(t.LevelOrder()),console.log(t.PreOrder(t.root)),console.log(t.postOrder(t.root)),console.log(t.InOrder(t.root)),t.Insert(14),t.Insert(13),console.log(t.CreateTree([1,4,3,5,6,7,8])),console.log(t.isBalanced(t.root)),console.log(t.reBalance(t.root)),console.log(t.isBalanced(t.reBalance(t.root)))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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ZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvL0NvbSBvcyBjb25oZWNpbWVudG9zIGFjdW11bGFkb3MgYW50ZXJpb21lbnRlLCBqdW50ZSB0dWRvIGUgZmHDp2EgbyBzZWd1aW50ZVxyXG4vLzEuQ3JpZSB1bWEgYmluYXJ5IHRyZWUgZGUgbsO6bWVyb3MgYWxlYXRvcmlvc1xyXG4vLzIuQ29uZmlybWUgcXVlIGEgw6Fydm9yZSBlc3TDoSBiYWxhbmNlYWRhIGNoYW1hbmRvIGlzQmFsYW5jZWRcclxuLy8zLk1vc3RyZSBvcyBlbGVtZW50b3MgZW0gbGV2ZWwsIFByZU9yZGVyLCBQb3N0T3JkZXIgZSBJbk9yZGVyXHJcbi8vNC5EZXNiYWxhbmNlIGEgw6Fydm9yZSBhZGljaW9uYW5kbyB2YXJpb3MgbsO6bWVyb3NcclxuLy81LkNvbmZpcm1lIHF1ZSBhIMOhcnZvcmUgZXN0w6EgZGVzYmFsYW5jZWFkYSBjaGFtYW5kbyBpc0JhbGFuY2VkXHJcbi8vNi5CYWxhbmNlaSBhIMOhcnZvcmUgY2hhbWFuZG8gcmVCYWxhbmNlXHJcbi8vNy5Db25maXJtZSBxdWUgYSDDoXJ2b3JlIGVzdMOhIGJhbGFuY2VhZGEgY2hhbWFuZG8gaXNCYWxhbmNlZFxyXG4vLzguTW9zdHJlIG9zIGVsZW1lbnRvcyBlbSBsZXZlbCwgUHJlT3JkZXIsIFBvc3RPcmRlciBlIEluT3JkZXJcclxuIGltcG9ydCB7IHNvcnRBcnJheSB9IGZyb20gXCIuL2FyckZ1bmN0aW9uXCJcclxuXHJcblxyXG4gIGxldCBoZWlnaHQgPSAtMVxyXG5cclxuXHJcbmNsYXNzIE5vZGUge1xyXG4gICAgY29uc3RydWN0b3IodmFsdWUpe1xyXG4gICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZVxyXG4gICAgICAgIHRoaXMubGVmdCA9IG51bGxcclxuICAgICAgICB0aGlzLnJpZ2h0ID0gbnVsbFxyXG4gICAgfVxyXG59XHJcblxyXG5cclxuY2xhc3MgQlNUe1xyXG4gICAgY29uc3RydWN0b3IoKXtcclxuICAgICAgICB0aGlzLnJvb3QgPSBudWxsXHJcbiAgICB9XHJcbiAgICBDcmVhdGVUcmVlKGFycixsZWZ0ID0gMCwgcmlnaHQgPSBhcnIubGVuZ3RoLTEpe1xyXG4gICAgICAgIGlmKGxlZnQgPiByaWdodCkgcmV0dXJuIG51bGxcclxuICAgICAgICBsZXQgbWlkID0gTWF0aC5mbG9vcigobGVmdCtyaWdodCkvMilcclxuICAgICAgICBsZXQgcm9vdCA9IG5ldyBOb2RlKGFyclttaWRdKVxyXG4gICAgICAgIHJvb3QubGVmdCA9IHRoaXMuQ3JlYXRlVHJlZShhcnIsbGVmdCxtaWQtMSlcclxuICAgICAgICByb290LnJpZ2h0ID0gdGhpcy5DcmVhdGVUcmVlKGFycixtaWQrMSxyaWdodClcclxuICAgICAgICByZXR1cm4gcm9vdFxyXG4gICAgfVxyXG5cclxuICAgIEluc2VydCh2YWx1ZSl7XHJcbiAgICAgICAgbGV0IG5ld05vZGUgPSBuZXcgTm9kZSh2YWx1ZSlcclxuICAgICAgICBpZih0aGlzLnJvb3QgPT09IG51bGwpIHRoaXMucm9vdCA9IG5ld05vZGVcclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5JbnNlcnROb2RlKHRoaXMucm9vdCwgbmV3Tm9kZSlcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgSW5zZXJ0Tm9kZShyb290LG5ld05vZGUpe1xyXG4gICAgICAgIGlmKG5ld05vZGUudmFsdWUgPCByb290LnZhbHVlKXtcclxuICAgICAgICAgICAgaWYocm9vdC5sZWZ0ID09PSBudWxsKXtcclxuICAgICAgICAgICAgICAgIHJvb3QubGVmdCA9IG5ld05vZGVcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNle1xyXG4gICAgICAgICAgICAgICAgdGhpcy5JbnNlcnROb2RlKHJvb3QubGVmdCwgbmV3Tm9kZSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNle1xyXG4gICAgICAgICAgICBpZihyb290LnJpZ2h0ID09PSBudWxsKXtcclxuICAgICAgICAgICAgICAgIHJvb3QucmlnaHQgPSBuZXdOb2RlXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZXtcclxuICAgICAgICAgICAgICAgIHRoaXMuSW5zZXJ0Tm9kZShyb290LnJpZ2h0LCBuZXdOb2RlKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgIH1cclxuICAgIExldmVsT3JkZXIoKXtcclxuICAgICAgICBsZXQgcXVldWUgPSBbXVxyXG4gICAgICAgIHF1ZXVlLnB1c2godGhpcy5yb290KVxyXG4gICAgICAgIHdoaWxlKHF1ZXVlLmxlbmd0aCl7XHJcbiAgICAgICAgICAgIGxldCBjdXJyZW50ID0gcXVldWUuc2hpZnQoKVxyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhjdXJyZW50LnZhbHVlKVxyXG5cclxuICAgICAgICAgICAgaWYoY3VycmVudC5sZWZ0KXtcclxuICAgICAgICAgICAgICAgIHF1ZXVlLnB1c2goY3VycmVudC5sZWZ0KVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmKGN1cnJlbnQucmlnaHQpe1xyXG4gICAgICAgICAgICAgICAgcXVldWUucHVzaChjdXJyZW50LnJpZ2h0KVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgXHJcbiAgICBQcmVPcmRlcihyb290KXtcclxuICAgICAgICBpZighcm9vdCkgcmV0dXJuXHJcbiAgICAgICAgY29uc29sZS5sb2cocm9vdC52YWx1ZSlcclxuICAgICAgICB0aGlzLlByZU9yZGVyKHJvb3QubGVmdClcclxuICAgICAgICB0aGlzLlByZU9yZGVyKHJvb3QucmlnaHQpXHJcbiAgICB9XHJcbiAgICBwb3N0T3JkZXIocm9vdCl7XHJcbiAgICAgICAgaWYoIXJvb3QpIHJldHVyblxyXG4gICAgICAgIHRoaXMucG9zdE9yZGVyKHJvb3QubGVmdClcclxuICAgICAgICBjb25zb2xlLmxvZyhyb290LnZhbHVlKVxyXG4gICAgICAgIHRoaXMucG9zdE9yZGVyKHJvb3QucmlnaHQpXHJcbiAgICB9XHJcbiAgICBJbk9yZGVyKHJvb3Qpe1xyXG4gICAgICAgIGlmKCFyb290KSByZXR1cm5cclxuICAgICAgICB0aGlzLkluT3JkZXIocm9vdC5sZWZ0KVxyXG4gICAgICAgIHRoaXMuSW5PcmRlcihyb290LnJpZ2h0KVxyXG4gICAgICAgIGNvbnNvbGUubG9nKHJvb3QudmFsdWUpXHJcbiAgICB9XHJcbiAgICBpc0JhbGFuY2VkSGVscGVyKHJvb3Qpe1xyXG4gICAgICAgIGlmKHJvb3QgPT09IG51bGwpIHJldHVybiAtMVxyXG4gICAgICAgICAgbGV0IGxlZnRIZWlnaHQgPSB0aGlzLmlzQmFsYW5jZWRIZWxwZXIocm9vdC5sZWZ0KVxyXG4gICAgICAgICAgbGV0IHJpZ2h0SGVpZ2h0ID0gdGhpcy5pc0JhbGFuY2VkSGVscGVyKHJvb3QucmlnaHQpXHJcbiAgICAgICAgICBsZXQgYW5zID0gTWF0aC5tYXgobGVmdEhlaWdodCxyaWdodEhlaWdodCkrMVxyXG4gICAgICAgIHJldHVybiBhbnNcclxuICAgICAgICAgICAgXHJcbiAgICB9XHJcbiAgICBpc0JhbGFuY2VkKHJvb3Qpe1xyXG4gICAgICAgIGlmKHRoaXMuaXNCYWxhbmNlZEhlbHBlcihyb290LmxlZnQpIC0gdGhpcy5pc0JhbGFuY2VkSGVscGVyKHJvb3QucmlnaHQpID09MXx8dGhpcy5pc0JhbGFuY2VkSGVscGVyKHJvb3QubGVmdCktdGhpcy5pc0JhbGFuY2VkSGVscGVyKHJvb3QucmlnaHQpID09LTF8fHRoaXMuaXNCYWxhbmNlZEhlbHBlcihyb290LmxlZnQpLXRoaXMuaXNCYWxhbmNlZEhlbHBlcihyb290LnJpZ2h0KT09MCkge3JldHVybiB0cnVlfVxyXG4gICAgICAgIHJldHVybiBmYWxzZVxyXG4gICAgfVxyXG4gICAgcmVCYWxhbmNlKHJvb3Qpe1xyXG4gICAgICBsZXQgYXJyID0gW11cclxuICAgICAgdGhpcy5FbU9yZGVtKHJvb3QsYXJyKVxyXG4gICAgICByZXR1cm4gdGhpcy5idWlsZFRyZWUoYXJyKVxyXG4gICAgfVxyXG4gICAgRW1PcmRlbShyb290LGFycil7XHJcbiAgICAgICAgaWYoIXJvb3QpIHJldHVyblxyXG4gICAgICAgIHRoaXMuRW1PcmRlbShyb290LmxlZnQsYXJyKVxyXG4gICAgICAgIGFyci5wdXNoKHJvb3QudmFsdWUpXHJcbiAgICAgICAgdGhpcy5FbU9yZGVtKHJvb3QucmlnaHQsYXJyKVxyXG4gICAgfVxyXG5cclxuICAgIGJ1aWxkVHJlZShhcnIpe1xyXG4gICAgICAgIGlmKGFyci5sZW5ndGggPT09MCkgcmV0dXJuIG51bGxcclxuXHJcbiAgICAgICAgbGV0IG1pZCA9IE1hdGguZmxvb3IoYXJyLmxlbmd0aC8yKVxyXG4gICAgICAgIGxldCBoZWFkID0gbmV3IE5vZGUoYXJyW21pZF0pXHJcblxyXG4gICAgICAgIGxldCBsZWZ0ID0gYXJyLnNsaWNlKDAsbWlkKTtcclxuICAgICAgICBsZXQgcmlnaHQgPSBhcnIuc2xpY2UobWlkKzEpXHJcblxyXG4gICAgICAgIGhlYWQubGVmdCA9ICB0aGlzLmJ1aWxkVHJlZShsZWZ0KVxyXG4gICAgICAgIGhlYWQucmlnaHQgPSB0aGlzLmJ1aWxkVHJlZShyaWdodClcclxuXHJcbiAgICAgICAgcmV0dXJuIGhlYWRcclxuICAgICAgfVxyXG5cclxuXHJcbn1cclxuXHJcblxyXG5sZXQgYnN0ID0gbmV3IEJTVCgpXHJcblxyXG5ic3QuSW5zZXJ0KDEwKVxyXG5ic3QuSW5zZXJ0KDUpXHJcbmJzdC5JbnNlcnQoMTUpXHJcblxyXG5cclxuXHJcblxyXG5jb25zb2xlLmxvZyhic3QuaXNCYWxhbmNlZChic3Qucm9vdCkpXHJcbmNvbnNvbGUubG9nKGJzdC5MZXZlbE9yZGVyKCkpXHJcbmNvbnNvbGUubG9nKGJzdC5QcmVPcmRlcihic3Qucm9vdCkpXHJcbmNvbnNvbGUubG9nKGJzdC5wb3N0T3JkZXIoYnN0LnJvb3QpKVxyXG5jb25zb2xlLmxvZyhic3QuSW5PcmRlcihic3Qucm9vdCkpXHJcbmJzdC5JbnNlcnQoMTQpXHJcbmJzdC5JbnNlcnQoMTMpXHJcbmNvbnNvbGUubG9nKGJzdC5DcmVhdGVUcmVlKFsxLDQsMyw1LDYsNyw4XSkpXHJcbmNvbnNvbGUubG9nKGJzdC5pc0JhbGFuY2VkKGJzdC5yb290KSlcclxuY29uc29sZS5sb2coYnN0LnJlQmFsYW5jZShic3Qucm9vdCkpXHJcbmNvbnNvbGUubG9nKGJzdC5pc0JhbGFuY2VkKGJzdC5yZUJhbGFuY2UoYnN0LnJvb3QpKSkiXSwibmFtZXMiOlsiTm9kZSIsImNvbnN0cnVjdG9yIiwidmFsdWUiLCJ0aGlzIiwibGVmdCIsInJpZ2h0IiwiYnN0Iiwicm9vdCIsIkNyZWF0ZVRyZWUiLCJhcnIiLCJsZW5ndGgiLCJtaWQiLCJNYXRoIiwiZmxvb3IiLCJJbnNlcnQiLCJuZXdOb2RlIiwiSW5zZXJ0Tm9kZSIsIkxldmVsT3JkZXIiLCJxdWV1ZSIsInB1c2giLCJjdXJyZW50Iiwic2hpZnQiLCJjb25zb2xlIiwibG9nIiwiUHJlT3JkZXIiLCJwb3N0T3JkZXIiLCJJbk9yZGVyIiwiaXNCYWxhbmNlZEhlbHBlciIsImxlZnRIZWlnaHQiLCJyaWdodEhlaWdodCIsIm1heCIsImlzQmFsYW5jZWQiLCJyZUJhbGFuY2UiLCJFbU9yZGVtIiwiYnVpbGRUcmVlIiwiaGVhZCIsInNsaWNlIl0sInNvdXJjZVJvb3QiOiIifQ==